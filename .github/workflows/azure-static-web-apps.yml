name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore: [ '**/*.md' ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ main ]

concurrency:
  group: swa-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_deploy:
    if: github.event_name != 'pull_request' || github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Build the API ourselves so Oryx doesn't try to run tsc
      - name: Use Node 18 for API build
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - name: Validate function.json syntax (pre-build)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          for f in api/**/function.json; do
            echo "Checking JSON: $f"
            node -e "JSON.parse(require('fs').readFileSync(process.argv[1],'utf8'))" "$f"
          done

      - name: Build API (ts -> js) and keep only prod deps
        working-directory: api
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi
          npx tsc -p tsconfig.json
          npm prune --omit=dev

      - name: Validate function.json scriptFile targets (post-build)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          bad=0
          for f in api/**/function.json; do
            dir="$(dirname "$f")"
            script="$(
              node -e "const j=JSON.parse(require('fs').readFileSync(process.argv[1],'utf8')); let s=j.scriptFile||'index.js'; s=s.replace(/^\.\//,''); process.stdout.write(s);" "$f"
            )"
            target="$dir/$script"
            if [ -f "$target" ]; then
              echo "OK  $f -> $(basename "$script")"
            else
              echo "ERROR: scriptFile path not found: $script (from $f)"
              bad=$((bad+1))
            fi
          done
          [ $bad -eq 0 ]

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: web
          skip_app_build: true
          app_build_command: 'echo "skip app build"'
          api_location: api
          skip_api_build: true
          api_build_command: 'echo "skip api build"'

      # ---- Smoke tests (requires repo variable SWA_URL) ----
      - name: Smoke test API (/api/ping)
        if: ${{ github.ref == 'refs/heads/main' }}
        shell: bash
        env:
          BASE: ${{ vars.SWA_URL }}
        run: |
          set -euo pipefail
          echo "Waiting for $BASE/api/ping ..."
          for i in {1..30}; do
            code=$(curl -sS -o /tmp/ping.json -w "%{http_code}" "$BASE/api/ping" || true)
            test "$code" = "200" && break
            sleep 5
          done
          if [ "${code:-}" != "200" ]; then
            echo "Ping failed, HTTP $code"
            exit 1
          fi
          node -e "const fs=require('fs'); const j=JSON.parse(fs.readFileSync('/tmp/ping.json','utf8')); if(!j.ok){console.error('ok!=true');process.exit(1)}"

      - name: Smoke test web (home page)
        if: ${{ github.ref == 'refs/heads/main' }}
        shell: bash
        env:
          BASE: ${{ vars.SWA_URL }}
        run: |
          set -euo pipefail
          code=$(curl -sS -o /dev/null -w "%{http_code}" "$BASE")
          if [ "$code" != "200" ] && [ "$code" != "304" ]; then
            echo "Unexpected home status $code"
            exit 1
          fi
          echo "Home page OK ($code)"

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Close PR Environment
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: close
