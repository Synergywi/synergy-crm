name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (no cache)
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps
        shell: bash
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci || npm install --legacy-peer-deps
          else
            npm install --legacy-peer-deps
          fi

      - name: Build app
        shell: bash
        run: npm run build

      # Find the folder that actually contains index.html (dist/build/out/.output/public or dist/<project>)
      - name: Detect app artifact directory
        shell: bash
        run: |
          set -e
          OUT=""
          for d in dist build out .output/public; do
            if [ -d "$d" ] && find "$d" -type f -name index.html | head -n1 >/dev/null 2>&1; then
              OUT="$d"; break
            fi
          done
          if [ -z "$OUT" ] && [ -d dist ]; then
            SUB=$(find dist -maxdepth 2 -type f -name index.html | head -n1 || true)
            if [ -n "$SUB" ]; then OUT=$(dirname "$SUB"); fi
          fi
          if [ -z "$OUT" ]; then
            echo "No built app found (dist/build/out/.output/public or dist/<project>)" >&2
            exit 1
          fi
          echo "OUTPUT_DIR=$OUT" >> $GITHUB_ENV
          echo "Using OUTPUT_DIR=$OUT"

      # Put SPA routing + MIME types inside the built folder
      - name: Write staticwebapp.config.json to output
        shell: bash
        run: |
          CFG="$OUTPUT_DIR/staticwebapp.config.json"
          printf '%s\n' \
            '{' \
            '  "navigationFallback": {' \
            '    "rewrite": "/index.html",' \
            '    "exclude": ["/assets/*", "/*.css", "/*.js", "/*.map", "/*.ico", "/*.png", "/*.jpg", "/*.jpeg", "/*.svg"]' \
            '  },' \
            '  "mimeTypes": {' \
            '    ".js": "text/javascript",' \
            '    ".mjs": "text/javascript",' \
            '    ".css": "text/css",' \
            '    ".wasm": "application/wasm"' \
            '  }' \
            '}' > "$CFG"
          echo "Wrote $CFG"

      - name: Debug output listing
        shell: bash
        run: |
          echo "== OUTPUT_DIR: $OUTPUT_DIR =="
          ls -la "$OUTPUT_DIR" || true
          find "$OUTPUT_DIR" -maxdepth 2 -type f | head -n 80 || true
          if [ -d api ]; then
            echo "== API tree (depth 2) =="
            find api -maxdepth 2 -type f -not -path "*/node_modules/*" | sed 's/^/  - /' || true
          fi

      # Try app + API FIRST â€” app_location points directly at the built folder
      - name: Deploy to Azure Static Web Apps (app + API)
        id: deploy_with_api
        continue-on-error: true
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: ${{ env.OUTPUT_DIR }}   # <-- deploy from build folder, not repo root
          app_artifact_location: ""             # not used when app_location is already the build
          api_location: api                     # set "" if you truly have no API
          skip_app_build: true

      # If API distribution flakes, deploy frontend-only from the build folder
      - name: Fallback deploy (frontend only)
        if: steps.deploy_with_api.outcome == 'failure'
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: ${{ env.OUTPUT_DIR }}   # <-- still deploy from the build folder
          app_artifact_location: ""
          api_location: ""
          skip_app_build: true

      - name: Summary
        if: always()
        shell: bash
        run: |
          echo "Deploy with API outcome: ${{ steps.deploy_with_api.outcome }}"
          if [ "${{ steps.deploy_with_api.outcome }}" = "failure" ]; then
            echo "API distribution failed; site deployed frontend-only as fallback."
          else
            echo "API included in deployment."
          fi
