name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Build API ourselves so Oryx doesn't try to run tsc
      - name: Use Node 18 for API build
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Validate function.json syntax (pre-build)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          for f in api/**/function.json; do
            echo "Checking JSON: $f"
            node -e "JSON.parse(require('fs').readFileSync(process.argv[1],'utf8'))" "$f"
          done

      - name: Build API (compile TS in-place; then prune dev deps)
        working-directory: api
        shell: bash
        run: |
          set -e
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi
          npx tsc -p tsconfig.json
          npm prune --omit=dev

      - name: Validate function.json scriptFile targets (post-build)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          while IFS= read -r -d '' F; do
            DIR=$(dirname "$F")
            TARGET=$(node -e "process.stdout.write(JSON.parse(require('fs').readFileSync(process.argv[1],'utf8')).scriptFile||'')" "$F")
            if [ -z "$TARGET" ]; then
              echo "Error: no scriptFile in $F"; exit 1
            fi
            if [ ! -f "$DIR/$TARGET" ]; then
              echo "Error: scriptFile path not found: $DIR/$TARGET (from $F)"; exit 1
            fi
            echo "OK  $F -> $TARGET"
          done < <(find api -name function.json -print0)

      # Deploy (we skip builds because we've already compiled/pruned the API)
      - name: Deploy to Azure Static Web Apps
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: web
          skip_app_build: true
          api_location: api
          skip_api_build: true

      # ---- Smoke Test ----
      # Tries /api/ping until we get HTTP 200 with {ok:true} (retries while Functions warm up)
      - name: Smoke test /api/ping (retry until warm)
        if: ${{ steps.deploy.outcome == 'success' }}
        env:
          DEPLOYMENT_ENV_URL: ${{ steps.deploy.outputs.deployment_environment_url }}
          STATIC_URL: ${{ steps.deploy.outputs.static_web_app_url }}
          # Fallback: put your app URL in a repo variable if the action outputs are blank
          # Settings → Variables → Actions → New variable: SWA_URL = https://<your-app>.azurestaticapps.net
          SWA_URL: ${{ vars.SWA_URL }}
        shell: bash
        run: |
          set -euo pipefail

          URL="${DEPLOYMENT_ENV_URL:-}"
          [ -z "$URL" ] && URL="${STATIC_URL:-}"
          [ -z "$URL" ] && URL="${SWA_URL:-}"

          if [ -z "$URL" ]; then
            echo "Could not determine SWA URL."
            echo "If the deploy action doesn't expose outputs in your setup, create a repo variable SWA_URL"
            echo "and set it to your site, e.g. https://<your-app>.azurestaticapps.net"
            exit 1
          fi

          echo "Pinging $URL/api/ping ..."
          for i in {1..12}; do
            code=$(curl -sS -o /tmp/ping.json -w '%{http_code}' "$URL/api/ping" || true)
            if [ "$code" = "200" ]; then
              echo "200 from /api/ping:"
              cat /tmp/ping.json
              node -e "const fs=require('fs');const o=JSON.parse(fs.readFileSync('/tmp/ping.json','utf8')); if(!o.ok){throw new Error('ok=false')}"
              echo "Smoke test passed ✅"
              exit 0
            fi
            echo "Attempt $i: HTTP $code. Retrying in 5s..."
            sleep 5
          done

          echo "Smoke test failed ❌ — no 200 from $URL/api/ping"
          exit 1
