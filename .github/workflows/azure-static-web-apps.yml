name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FRONTEND_DIR: web
  BUILD_DIR: web/dist

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Install dependencies for the frontend in /web
      - name: Install deps (web)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install --legacy-peer-deps
          fi

      # Build the frontend in /web â†’ web/dist
      - name: Build app (web)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

      # Point deployment at the built folder
      - name: Set OUTPUT_DIR
        run: echo "OUTPUT_DIR=${{ env.BUILD_DIR }}" >> $GITHUB_ENV

      # Put SPA routing + MIME types inside the built folder
      - name: Write staticwebapp.config.json to output
        run: |
          CFG="${{ env.OUTPUT_DIR }}/staticwebapp.config.json"
          printf '%s\n' \
            '{' \
            '  "navigationFallback": {' \
            '    "rewrite": "/index.html",' \
            '    "exclude": ["/assets/*", "/*.css", "/*.js", "/*.map", "/*.ico", "/*.png", "/*.jpg", "/*.jpeg", "/*.svg"]' \
            '  },' \
            '  "mimeTypes": {' \
            '    ".js": "text/javascript",' \
            '    ".mjs": "text/javascript",' \
            '    ".css": "text/css",' \
            '    ".wasm": "application/wasm"' \
            '  }' \
            '}' > "$CFG"
          echo "Wrote $CFG"

      - name: Debug output listing
        run: |
          echo "== OUTPUT_DIR: $OUTPUT_DIR =="
          ls -la "$OUTPUT_DIR" || true
          find "$OUTPUT_DIR" -maxdepth 2 -type f | head -n 80 || true
          if [ -d api ]; then
            echo "== API tree (depth 2) =="
            find api -maxdepth 2 -type f -not -path "*/node_modules/*" | sed 's/^/  - /' || true
          fi

      # Deploy built frontend and include API (Functions) from /api
      - name: Deploy to Azure Static Web Apps (app + API)
        id: deploy_with_api
        continue-on-error: true
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: ${{ env.OUTPUT_DIR }}   # deploy the built folder
          app_artifact_location: ""             # not needed when app_location is already 'dist'
          api_location: api                     # your Functions backend
          skip_app_build: true                  # we've already built

      # Fallback: deploy frontend-only if API packaging fails
      - name: Fallback deploy (frontend only)
        if: steps.deploy_with_api.outcome == 'failure'
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: ${{ env.OUTPUT_DIR }}
          app_artifact_location: ""
          api_location: ""
          skip_app_build: true

      - name: Summary
        if: always()
        run: |
          echo "Deploy with API outcome: ${{ steps.deploy_with_api.outcome }}"
          if [ "${{ steps.deploy_with_api.outcome }}" = "failure" ]; then
            echo "API distribution failed; site deployed frontend-only as fallback."
          else
            echo "API included in deployment."
          fi
