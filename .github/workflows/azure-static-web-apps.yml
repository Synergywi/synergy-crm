name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: aswa-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------------- Node (no cache â†’ no lockfile required) ----------------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # ---------------- Detect package manager ----------------
      - name: Detect package manager
        id: pm
        run: |
          set -euo pipefail
          PM="npm"
          INSTALL_CMD="npm install"
          BUILD_CMD="npm run build"

          if [ -f yarn.lock ]; then
            PM="yarn"
            corepack enable
            INSTALL_CMD="yarn install --frozen-lockfile"
            BUILD_CMD="yarn build"
          elif [ -f pnpm-lock.yaml ]; then
            PM="pnpm"
            corepack enable
            npm i -g pnpm@latest
            INSTALL_CMD="pnpm install --frozen-lockfile"
            BUILD_CMD="pnpm build"
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            PM="npm"
            INSTALL_CMD="npm ci"
            BUILD_CMD="npm run build"
          fi

          echo "PM=$PM" >> "$GITHUB_ENV"
          echo "INSTALL_CMD=$INSTALL_CMD" >> "$GITHUB_ENV"
          echo "BUILD_CMD=$BUILD_CMD" >> "$GITHUB_ENV"
          echo "Package manager: $PM"
          echo "Install cmd: $INSTALL_CMD"
          echo "Build cmd: $BUILD_CMD"

      # ---------------- Install & build ----------------
      - name: Install deps
        run: ${{ env.INSTALL_CMD }}

      - name: Build app
        run: ${{ env.BUILD_CMD }}

      # ---------------- Detect app artifact directory ----------------
      - name: Detect app artifact directory
        id: detect_out
        run: |
          set -euo pipefail

          OUTPUT_DIR=""

          # Common SPA outputs
          for d in dist build out ".output/public"; do
            if [ -d "$d" ]; then
              if find "$d" -type f -name "index.html" | head -n 1 >/dev/null 2>&1; then
                OUTPUT_DIR="$d"
                break
              fi
            fi
          done

          # Angular: dist/<project>
          if [ -z "$OUTPUT_DIR" ] && [ -d dist ]; then
            SUB="$(find dist -maxdepth 2 -type f -name index.html | head -n 1 || true)"
            if [ -n "$SUB" ]; then
              OUTPUT_DIR="$(dirname "$SUB")"
            fi
          fi

          if [ -z "$OUTPUT_DIR" ]; then
            echo "Could not find built app (looked for dist, build, out, .output/public, or dist/<project> with index.html)" >&2
            exit 1
          fi

          echo "OUTPUT_DIR=$OUTPUT_DIR" >> "$GITHUB_ENV"
          echo "Using app artifact directory: $OUTPUT_DIR"

      - name: Debug: list artifact contents
        run: |
          echo "== Output: $OUTPUT_DIR =="
          ls -la "$OUTPUT_DIR" || true
          echo "== Sample files =="
          find "$OUTPUT_DIR" -maxdepth 2 -type f | head -n 50 || true

      # ---------------- Detect API presence ----------------
      - name: Detect API folder
        id: detect_api
        run: |
          if [ -d api ]; then
            echo "API_LOCATION=api" >> "$GITHUB_ENV"
            echo "Found /api; SWA will build Functions."
          else
            echo "API_LOCATION=" >> "$GITHUB_ENV"
            echo "No /api folder; deploying frontend only."
          fi

      # ---------------- Deploy ----------------
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: "/"
          app_artifact_location: "${{ env.OUTPUT_DIR }}"
          api_location: "${{ env.API_LOCATION }}"
          skip_app_build: true
          # Do NOT skip API build; let the action detect Functions language
